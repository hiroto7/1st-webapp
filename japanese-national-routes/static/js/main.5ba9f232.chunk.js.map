{"version":3,"sources":["Arrow.js","App.js","serviceWorker.js","index.js"],"names":["Arrow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animationFrame","state","value","_this2","requestAnimationFrame","callback","time","Math","floor","length","setState","cancelAnimationFrame","parts","i","push","react_default","a","createElement","style","color","letterSpacing","React","Component","App","currentRouteNumber","current","error","info","number","query","fetch","concat","encodeURIComponent","headers","Accept","response","text","json","JSON","parse","results","bindings","Error","start","toConsumableArray","Set","map","binding","routeStartLabel","end","routeEndLabel","undefined","_context","t0","className","padding","fontSize","fontWeight","type","autoFocus","min","max","onChange","e","target","changeRouteTo","toString","display","justifyContent","alignItems","textAlign","str","margin","repeat","Arrow_Arrow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ba9f232.chunk.js","sourcesContent":["// @ts-check\nimport React from 'react';\n\n/** @extends {React.Component<{ length: number }, { value: number }>} */\nexport default class Arrow extends React.Component {\n    /** @type {number | null} */\n    animationFrame = null;\n\n    /** @param {{ length: number }} props */\n    constructor(props) {\n        super(props);\n        this.state = { value: 0 };\n    }\n\n    componentDidMount() {\n        /** @param {number} time */\n        const callback = time => {\n            const value = Math.floor(time / 250 % (this.props.length + 1));\n            if (this.state.value !== value) {\n                this.setState({ value });\n            }\n            this.animationFrame = requestAnimationFrame(callback);\n        };\n        this.animationFrame = requestAnimationFrame(callback);\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame !== null) {\n            cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    render() {\n        const parts = [];\n        for (let i = 0; i < this.props.length; i++) {\n            parts.push(<span style={{ color: i < this.state.value ? 'white' : 'rgba(255, 255, 255, .5)' }}>&gt;</span>)\n        }\n        return (<div style={{ letterSpacing: '-.25em' }}>{parts}</div >)\n    }\n}","// @ts-check\nimport React from 'react';\nimport './App.css';\nimport Arrow from './Arrow';\n\n/** @typedef {{ number: number; start: string[]; end: string[]; length: number | null }} Route */\n\n/** @extends {React.Component<{}, { current: Route | null, currentRouteNumber: number | '', error: object | null, info: object | null }>} */\nclass App extends React.Component {\n  /** @type {{ current: Route | null, currentRouteNumber: number | '', error: object | null, info: object | null }} */\n  state = { currentRouteNumber: '', current: null, error: null, info: null };\n\n  /** @param {number} number */\n  async changeRouteTo(number) {\n    const endpoint = 'http://www.ohsuga.is.uec.ac.jp/sparql';\n    const query = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbpedia-ja: <http://ja.dbpedia.org/resource/>\nPREFIX dbpedia-owl: <http://dbpedia.org/ontology/>\n\nselect distinct * where {\n  dbpedia-ja:国道${number}号\n    dbpedia-owl:routeStart ?routeStart ;\n    dbpedia-owl:routeEnd ?routeEnd .\n  optional {\n    dbpedia-ja:国道${number}号 dbpedia-owl:length ?length .\n  }\n  ?routeStart rdfs:label ?routeStartLabel.\n  ?routeEnd rdfs:label ?routeEndLabel .\n}\n`;\n\n    try {\n      this.setState({\n        current: null,\n        error: null,\n        info: '問い合わせ中...'\n      })\n      const response = await fetch(`${endpoint}?query=${encodeURIComponent(query)}`, {\n        headers: {\n          Accept: 'application/sparql-results+json'\n        }\n      });\n      const text = await response.text();\n      /** @type { { results: { bindings: [{ routeStartLabel: { value: string }, routeEndLabel: { value: string }, length: { value: number } }] } }} */\n      const json = JSON.parse(text);\n      if (json.results.bindings.length < 1) {\n        throw new Error(`'国道${number}号' は取得できません。`)\n      }\n      this.setState({\n        current: {\n          number,\n          start: [...new Set(json.results.bindings.map(binding => binding.routeStartLabel.value))],\n          end: [...new Set(json.results.bindings.map(binding => binding.routeEndLabel.value))],\n          length: json.results.bindings[0].length === undefined ? null : json.results.bindings[0].length.value\n        },\n        error: null,\n        info: json.results.bindings[0].length === undefined ? `'国道${number}号' の長さは取得できません。` : null\n      })\n    } catch (e) {\n      this.setState({\n        current: null,\n        error: e,\n        info: null\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ padding: '64px 0', fontSize: '2em', fontWeight: 'bold' }}>\n          国道\n          <input type=\"number\" autoFocus min={1} max={999} value={this.state.currentRouteNumber}\n            onChange={e => {\n              const value = +e.target.value;\n              this.setState({ currentRouteNumber: value });\n              this.changeRouteTo(value)\n            }}></input>\n          号\n        </div>\n        {\n          this.state.info === null ? '' : (\n            <div style={{ color: 'rgba(255, 255, 255, .5)' }}>{this.state.info.toString()}</div>\n          )\n        }\n        {\n          this.state.error === null ? '' : (\n            <div style={{ color: 'red' }}>{this.state.error.toString()}</div>\n          )\n        }\n        {\n          this.state.current === null ? '' : (\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: '2em' }}>\n              <ul style={{ textAlign: 'right' }}>{this.state.current.start.map(str => (<li>{str}</li>))}</ul>\n              <div style={{ margin: '0 1em' }}>\n                {this.state.current.length === null ? (\n                  <div>{'-'.repeat(8)}</div>\n                ) : (\n                    <div>\n                      <div>{\n                        this.state.current.length < 1000 ?\n                          `${this.state.current.length}m` :\n                          `${this.state.current.length / 1000}km`\n                      }</div>\n                      <div>\n                        <Arrow length={this.state.current.length / 20000} />\n                      </div>\n                    </div>\n                  )}\n              </div>\n              <ul style={{ textAlign: 'left' }}>{this.state.current.end.map(str => (<li>{str}</li>))}</ul>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}